#项目端口：9200
#第二个服务提供者goods的服务，需要进行修改一下端口以作区分，不要和第一个服务提供者goods9100的端口号进行重复
server.port=9200

#不再需要使用jsp 则此时下面进行注释掉
#配置前端展示使用JSP，因为springboot内部就是 spring+spring mvc
#spring.mvc.view.prefix=/
#spring.mvc.view.suffix=.jsp

#需要连接数据库, 连接一个数据库，这个时候没有连接多个数据库，仅连接一个；一般情况下一个微服务就连接一个数据库
spring.datasource.username=root
spring.datasource.password=Iamegg816448
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/goodsdb?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC

#没有使用得到redis，将redis进行注释掉
#配置redis的连接信息
#spring.redis.host=127.0.0.1
#spring.redis.port=6379
#spring.redis.password=

#自己的starter
#spring.cat.redis.host=
#spring.cat.redis.port=
#spring.cat.redis.password=


#暴露端点 的该内容可以先留在这里
#打开所有的web访问端点
management.endpoints.web.exposure.include=*




#==============================================================================================================

# 在添加完 eureka client 依赖之后，接着进行配置 eureka client相关内容
# 配置服务名称和注册中心地址
# 每间隔 2s，向服务端发送一次心跳，证明自己依然 “存活”
#lease 最近的 renewal 续约的 interval 间隔 seconds 秒
# goods服务提供者同时也是 eureka client客户端，eureka client客户端是注册到服务端 eureka server，注册到注册中心
# 下面该表示 eureka client 每隔2s 会给 eureka server服务端发送一次心跳，告诉eureka server服务端该服务提供者 该eureka client 客户端没有宕机
# 让服务端 eureka server知道
eureka.instance.lease-renewal-interval-in-seconds=2

# 告诉服务端，如果我 10s 之内没有给你发心跳，就代表我故障了，将我踢出掉
# 即在10s内，如果eureka client客户端没有给 eureka server服务端发送心跳，就让服务端 eureka server认为该 eureka client客户端已经宕机了，让其将该eureka client进行剔除掉
# 如果有别的服务需要调用该goods服务的话，那么由于10s内该eureka client没有给eureka server发送心跳被剔除之后就没有办法再次调用该，本服务了
# 就调用不到了，要不就调用别的另外一个服务，即可能本服务goods该服务进行部署了多份，比如说该服务进行部署了三份，当前该份服务宕机了之后，其余的两份服务并没有宕机
# 将该份宕机的服务剔除掉了之后，那么有别的服务需要调用的时候，就让它去调用另外那两份没有宕机的服务
eureka.instance.lease-expiration-duration-in-seconds=10

# 这个心跳原理是什么？一直不太理解，类似于ping 吗？
# 心跳原理即 eureka client 每隔一段时间就发送一个信息给eureka server服务端，不同的注册中心服务端与注册中心客户端发的内容有所不同
# 比如说redis的redis-client会向redis-server发送一个ping,这个时候redis-server就会返回redis-client一个pong
# 比如说mysql的话，心跳则是做一次select查询，select 1、select user等作为查询，那么它这个里面，它进行发心跳就可能是发送一个字符串之类的信息
# 这个需要具体看一下它的源码实现，看eureka的源码，具体是发送什么信息需要看源码才能知道
# 即eureka client发送个信息过去然后 eureka server 接收到了，代表着eureka client客户端是活着的，存活着的心跳
# 不同的应用都存在有这样的机制，很多都有，redis、mysql 一些的服务都有它们的心跳机制，即发送个信息过去


#告诉服务端，服务实例以 IP 为链接，而不是取 机器名
# 等运行之后再看效果，在后台可以看到，链接地址默认是取的机器名称；这里修改为true表示默认取ip；这个配不配置都没有太大关系
eureka.instance.prefer-ip-address=true

# 告诉服务端，服务实例的名字
# 即当前goods 服务提供者 eureka client向 服务注册中心注册服务了，给出服务提供者的名称，
# 即给出 eureka server服务端，该eureka client客户端的名称；相当于对自己的服务做了一个标记，标记一下自己
#eureka.instance.instance-id=34-springcloud-service-goods
# 服务实例id 是需要唯一的，所以这里不能和goods服务重叠
# goods9200项目需要重构，idea左侧选择中goods9200项目后，右击Refactor-rename-What would you like to do ?选择中 rename module,在模块名称编辑处输入：34-springcloud-service-goods-9200即可
eureka.instance.instance-id=34-springcloud-service-goods-9200


# eureka 注册中心的连接地址
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka
#eureka.client.service-url.defaultZone=http://eureka8761:8761/eureka,http://eureka8762:8762/eureka,http://eureka8763:8763/eureka
#linux eureka server服务 ip：192.168.182.130 内网ip变了：192.168.227.128 | 192.168.177.128
#eureka.client.service-url.defaultZone=http://192.168.182.130:8761/eureka,http://192.168.182.130:8762/eureka,http://192.168.182.130:8763/eureka
#eureka.client.service-url.defaultZone=http://192.168.227.128:8761/eureka,http://192.168.227.128:8762/eureka,http://192.168.227.128:8763/eureka
#eureka.client.service-url.defaultZone=http://192.168.177.128:8761/eureka,http://192.168.177.128:8762/eureka,http://192.168.177.128:8763/eureka
eureka.client.service-url.defaultZone=http://192.168.177.129:8761/eureka,http://192.168.177.129:8762/eureka,http://192.168.177.129:8763/eureka


# 就像dubbo当中连接zookeeper一样，在dubbo程序当中连接zookeeper，肯定要在dubbo程序当中配置zookeeper的ip、端口；那么此处也是一样
# 要进行配置 eureka-server服务端的ip 端口 eureka client要向 eureka server注册中心进行注册，那么首先需要知道 eureka server注册中心的接口地址是什么，才能往这个接口地址当中进行注册
# http://localhost:8761/eureka 这个就是eureka server 服务端所提供的接口地址，当时指定了服务注册中心的路径 eureka.client.service-url.defaultZone=http://localhost:8761/eureka
# eureka server 对外提供服务的接口地址路径即 http://localhost:8761/eureka
# 所以在eureka client当中填写 注册中心的连接地址时就需要填写上面这个地址，就相当于要将这个goods服务注册到这个地址上去

# 以上配置完成之后，停止GoodsApplication之后重新启动该GoodsApplication
# 重新启动成功之后就将注册到 eureka server服务注册中心上去了
# 看到http://127.0.0.1:8761 首页进行刷新
# 首页HOME中的 DS Replicas 下的 Instances currently registered with Eureka 下的表格栏 Application     AMIs        Availability Zones      Status下有一行记录
# 记录值为： UNKNOWN      n/a(1)      (1)       UP(-1)-34-springcloud-service-goods

#以及此时再去看http://127.0.0.1:8761 的菜单 LAST 1000 SINCE STARTUP中的 DS Replicas 下的 LAST 1000 newly  registered leases 下的表格栏 Timestamp       Lease下的记录值
#记录值为   2021-5-19 23:14:06          UNKNOWN(34-springcloud-service-goods)
# 表明该服务注册了

# 这两处当中都有一个问题，即UNKNOWN
# 该记录值Application 所对应的取值为UNKNOWN，有点不正常，需要进行调整，服务注册是ok的
# spring应用名称 添加完成之后将服务提供者goods重启；需要到main方法当中去进行添加@EnableEurekaClient注解
# 然后再去看http://127.0.0.1:8761 进行刷新，发现UNKNOWN就变为了下面的spring应用名称
# 此时在首页HOME的表格Application...中有两条记录，但是UNKNOWN 这一条由于经过重启变为了34-springcloud-service-goods，则该条记录将在一段时间后消失掉；
# 点击Status 字段下的服务提供者名称超链接，超链接的地址为http://192.168.0.104:9100/actuator/info  actuator 监控功能 所以此处点击它即打开了项目的服务监控功能，即项目需要配置一下项目监控功能，这样的话到时候点击超链接进去就可以看到，没有配置的话否则就会点进去报错；没有配置该actuator的功能
# Application代表spring 服务提供者应用名称  Status当中取值为UP 代表是开着的是正常的
spring.application.name=34-springcloud-service-goods

# 提示有 EMERGENCY！ EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT .
# RENEWALS ARE LESSER THAN  THRESHOLD  HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFF.
#即：EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.
# 这个是一个安全模式，后续解释

# 在消费者项目当中也是如此步骤 1.添加依赖 2. application.properties 配置eureka client以及eureka server url 3.写代码